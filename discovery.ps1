param($p1)

function Mostrar-Demo {
    Write-Host "======================================" -ForegroundColor Cyan
    Write-Host "      üîç DISCOVERY üîç                " -ForegroundColor Cyan
    Write-Host "======================================" -ForegroundColor Cyan
    Write-Host "üõú O script escaneia IPs ativos dentro de uma rede." -ForegroundColor Green
    Write-Host "üîπ Ele envia pacotes ICMP e exibe os que respondem." -ForegroundColor Green
    Write-Host "üîπ Executa varredura paralela para maior desempenho." -ForegroundColor Green
    Write-Host "üîπ Exemplo de uso:" -ForegroundColor Yellow
    Write-Host "   ‚û§ .\script.ps1 192.168.1" -ForegroundColor Yellow
    Start-Sleep -Seconds 3
}

# Verifica se o par√¢metro foi fornecido
if (!$p1) {
    Write-Host "‚ùå Uso: .\script.ps1 <rede_base>" -ForegroundColor Red
    Write-Host "Exemplo: .\script.ps1 192.168.1" -ForegroundColor Yellow
    exit
}

# Valida se o formato da rede est√° correto (ex: 192.168.1)
if ($p1 -notmatch '^\d{1,3}\.\d{1,3}\.\d{1,3}$') {
    Write-Host "‚ùå Erro: Formato de rede inv√°lido! Use algo como 192.168.1" -ForegroundColor Red
    exit
}

Mostrar-Demo  # Exibe a demonstra√ß√£o antes da execu√ß√£o

Write-Host "üîç Iniciando varredura em $p1.0/24..." -ForegroundColor Cyan
Write-Host "--------------------------------------" -ForegroundColor Cyan

# Varredura paralela
$jobs = @()
foreach ($ip in 1..254) {
    $jobs += Start-Job -ScriptBlock {
        param($base, $i)
        $hostIP = "$base.$i"
        $resp = Test-Connection -Count 1 -ComputerName $hostIP -ErrorAction SilentlyContinue
        if ($resp) {
            Write-Output "[+] Host ativo: $hostIP"
        }
    } -ArgumentList $p1, $ip
}

# Aguarda os jobs finalizarem e exibe os resultados
$jobs | ForEach-Object { Receive-Job -Job $_ }
$jobs | Remove-Job

Write-Host "‚úÖ Varredura conclu√≠da." -ForegroundColor Cyan
