import requests
import argparse
import time

# Cores para sa√≠da
RED = "\033[31m"
GREEN = "\033[32m"
YELLOW = "\033[33m"
CYAN = "\033[36m"
RESET = "\033[0m"

security_headers = {
    "Strict-Transport-Security": "Protege contra ataques MITM e downgrade de protocolo.",
    "Content-Security-Policy": "Previne inje√ß√£o de c√≥digo malicioso (XSS).",
    "X-Content-Type-Options": "Evita que navegadores ignorem o tipo MIME declarado.",
    "X-Frame-Options": "Impede que o site seja incorporado em iframes (clickjacking).",
    "X-XSS-Protection": "Protege contra ataques de script entre sites (XSS).",
    "Referrer-Policy": "Controla o envio do cabe√ßalho Referer para proteger a privacidade.",
}

def mostrar_demo():
    """Exibe uma demonstra√ß√£o do funcionamento do script antes da execu√ß√£o."""
    print("=" * 50 + f"{RESET}")
    print("       üöÄ CABE√áALHO DE SEGURAN√áA üöÄ      ")
    print("=" * 50 + f"{RESET}\n")
    print("üîπ O script verifica a presen√ßa de cabe√ßalhos de seguran√ßa em um site.")
    print("üîπ Se um cabe√ßalho estiver ausente, o site pode estar vulner√°vel.\n")
    print("üîπ Exemplo de sa√≠da:\n")
    print(f"   {GREEN}[+] Strict-Transport-Security: Encontrado{RESET}")
    print(f"   {RED}[-] X-Frame-Options: N√£o encontrado{RESET}\n")
    print("üîπ Recomenda√ß√£o: Ative todos os cabe√ßalhos de seguran√ßa no seu servidor.\n")
    time.sleep(3)

def verificar_cabecalhos_seguranca(url):
    """Verifica se os principais cabe√ßalhos de seguran√ßa est√£o presentes na resposta HTTP."""
    try:
        resposta = requests.get(url, timeout=5)
        headers = resposta.headers

        print(f"\nüîç {CYAN}Verificando cabe√ßalhos de seguran√ßa para {url}...{RESET}\n")

        for header, descricao in security_headers.items():
            if header in headers:
                print(f"{GREEN}[+] {header}: Encontrado - {headers[header]}{RESET}")
            else:
                print(f"{RED}[-] {header}: N√£o encontrado{RESET} ‚ùå")
                print(f"    {YELLOW}‚ö†Ô∏è  {descricao}{RESET}")

    except requests.exceptions.Timeout:
        print(f"{RED}Erro: Tempo de conex√£o esgotado para {url}.{RESET}")
    except requests.exceptions.RequestException as e:
        print(f"{RED}Erro ao acessar o site {url}: {e}{RESET}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Verificar cabe√ßalhos de seguran√ßa de um site.")
    parser.add_argument("url", help="URL do site a ser verificado")
    args = parser.parse_args()

    # Exibir demonstra√ß√£o antes da execu√ß√£o
    mostrar_demo()

    # Garante que a URL tenha um esquema v√°lido
    if not args.url.startswith(('http://', 'https://')):
        args.url = 'http://' + args.url

    verificar_cabecalhos_seguranca(args.url)
